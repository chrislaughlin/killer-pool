var launchExplore = document.querySelector('.launch-explore');
var closeExplore = document.querySelector('.close-explore');
var launchWindow = document.querySelector('.explore-ui');
var queryDropdown = document.querySelector('.query-dropdown');
var addFilterBtn = document.querySelector('.add-filter');
var applyQueryBtn = document.querySelector('.apply-query');
var suggestedPanel = document.querySelector('.suggested-filters');
var assetPanel = document.querySelector('.asset-assessment');
var operatorList = document.querySelector('.operators-list');
var filterOne = document.querySelector('.filter-one');
var filterTwo = document.querySelector('.filter-two');
var filterThree = document.querySelector('.filter-three');
var filterFour = document.querySelector('.filter-four');
var showData = document.querySelector('.show-data');
var activeCategoryLink = document.querySelector('.category-filters .is-active')
var showDataA = document.querySelector('.show-data a');
var showCategories = document.querySelector('.show-categories');
var categoryFilters = document.querySelector('.category-filters');
var activeFilters = document.querySelector('.filters .sidebar__link');
var existDropdown = document.querySelector('.existing-query');
var filterActiveText = document.querySelector('.filter-active-text');
var cancelQuery = document.querySelector('.cancel-query');
var saveQuery = document.querySelector('.save-query');
var containsList = document.querySelector('.contains-list');
var operatorControl = document.querySelector('.operator-control');
var getQuery = document.querySelector('.filter-active-text');
var dataDisplay = document.querySelector('.data-display');
var pageBody = document.querySelector('body');


launchExplore.addEventListener('click', function (e) {
    e.preventDefault();
    launchWindow.classList.add("show");
}, false);

closeExplore.addEventListener('click', function (e) {
    e.preventDefault();
    launchWindow.classList.remove('show');
}, false);

cancelQuery.addEventListener('click', function (e) {
    location.reload();

    ;
}, false);


showCategories.addEventListener('click', function (e) {
    e.preventDefault();
    activeFilters.classList.remove('is-active');
    this.classList.add('is-active');
    categoryFilters.classList.add('show');
    suggestedPanel.classList.add('is-hidden');
    assetPanel.classList.remove('is-hidden');
    filterOne.innerHTML = 'asset';
    filterOne.classList.add('text');
    filterOne.classList.add('is-accent');
    filterOne.classList.remove('is-white');
}, false);

// toggle category active links
var catAs = document.querySelectorAll('.category-filters a');
for (var a = 0; a < catAs.length; a++) {
    catAs[a].addEventListener('click', function (e) {
        document.querySelectorAll('.category-filters a').forEach(function (el) {
            el.classList.remove('is-active');
        })
        this.classList.add('is-active');
        suggestedPanel.classList.add('is-hidden')
        assetPanel.classList.remove('is-hidden')
    });
}

showData.addEventListener('click', function (e) {
    activeCategoryLink.classList.remove('is-active');
    showDataA.classList.add('is-active');
}, false);

// interactions to build the list, based on selected criteria of vuln list
var assetRow = document.querySelectorAll('.asset-row');

for (var a = 0; a < assetRow.length; a++) {
    assetRow[a].addEventListener('click', function (e) {
        //buildList(assetList, 'asset-list');
        singleLists(assetList, 'asset-list');
        operatorList.classList.add('show');
        checkSave();
        if (filterOne.textContent = 'New Filter') {
            filterOne.textContent = 'Asset';
        }
        var vulnSelected = document.querySelectorAll('.vuln-row.selected');
        for (var vs = 0; vs < vulnSelected.length; vs++) {
            if (vulnSelected.length > 0) {
                removeAssetList();
            } else {
                singleLists(assetList, 'asset-list');
            }
        }

        // Capture the rows span tag value
        var dataSpanTag = this.querySelector('.data-row .text');
        filterTwo.textContent = "." + dataSpanTag.textContent;
        filterThree.textContent = "";

        // build operator list
        operatorListItems('asset-list');
    });

    // check if that menu exists to allow hovering
    if (document.querySelector('.asset-list') == !null) {
        assetRow[a].addEventListener('mouseover', function (e) {
            singleLists(assetList, 'asset-list');
            operatorList.classList.add('show');
            if (filterOne.textContent = 'New Filter') {
                filterOne.textContent = 'Asset';
            }
            var vulnSelected = document.querySelectorAll('.vuln-row.selected');
            for (var vs = 0; vs < vulnSelected.length; vs++) {
                if (vulnSelected.length > 0) {
                    removeAssetList();
                } else {
                    singleLists(assetList, 'asset-list');
                }
            }
            // Capture the rows span tag value
            var dataSpanTag = this.querySelector('.data-row .text');
            filterTwo.textContent = "." + dataSpanTag.textContent;
            filterThree.textContent = "";
        });

        assetRow[a].addEventListener('mouseout', function (e) {
            removeAssetList();
            operatorList.classList.remove('show');
        });
    }
}


// interactions to build the list, based on selected criteria of asset list
var vulnRow = document.querySelectorAll('.vuln-row');
var vulnListAvail = document.querySelectorAll('.vuln-arow');
for (var v = 0; v < vulnRow.length; v++) {
    vulnRow[v].addEventListener('click', function (e) {
        singleLists(vulnList, 'vuln-list');
        operatorList.classList.add('show');
        checkSave();
        if (filterOne.textContent = 'New Filter') {
            filterOne.textContent = 'Asset';
        }
        var assetSelected = document.querySelectorAll('.asset-row.selected');
        for (var aas = 0; aas < assetSelected.length; aas++) {
            if (assetSelected.length > 0) {
                removeAssetList();
            } else {
                singleLists(vulnList, 'vuln-list');
            }
        }

        // Capture the rows span tag value
        var dataSpanTag = this.querySelector('.data-row .text');
        filterTwo.textContent = "." + dataSpanTag.textContent;
        filterThree.textContent = "";

        operatorListItems('vuln-list');

    });

    // check if that menu exists to allow hovering
    if (document.querySelector('.vuln-list') == !null) {
        vulnRow[v].addEventListener('mouseover', function (e) {
            singleLists(vulnList, 'vuln-list');
            operatorList.classList.add('show');
            if (filterOne.textContent = 'New Filter') {
                filterOne.textContent = 'Asset';
            }
            var assetSelected = document.querySelectorAll('.asset-row.selected');
            for (var aas = 0; aas < assetSelected.length; aas++) {
                if (assetSelected.length > 0) {
                    removeAssetList();
                } else {
                    singleLists(vulnList, 'vuln-list');
                }
            }

            // Capture the rows span tag value
            var dataSpanTag = this.querySelector('.data-row .text');
            filterTwo.textContent = "." + dataSpanTag.textContent;
            filterThree.textContent = "";
        });

        vulnRow[v].addEventListener('mouseout', function (e) {
            removeAssetList();
            operatorList.classList.remove('show');
        });
    }
}

// toggle row logic
var dataRow = document.querySelectorAll('.data-row');
for (var a = 0; a < dataRow.length; a++) {
    dataRow[a].addEventListener('click', function (e) {
        document.querySelectorAll('.data-row').forEach(function (el) {
            el.classList.remove('selected');
        })
        this.classList.add('selected');
        containsList.classList.remove('show');
        filterTwo.classList.remove('is-white');
        addFilterBtn.classList.add('is-disabled');
        addFilterBtn.classList.remove('is-tertiary');
    });
}

// filtering
function filterKeywords() {
    var focusInput = document.querySelector('.filter-input');
    var filter = focusInput.value.toUpperCase();
    var focusListItems = document.querySelectorAll('.contains-focus-list ul li');
    var inputValue = focusInput.value;
    for (var fl = 0; fl < focusListItems.length; fl++) {
        var resetItem = focusListItems[fl];
        if (resetItem.innerHTML.toUpperCase().indexOf(filter) <= -1) {
            focusListItems[fl].classList.add('show');
        } else{
            focusListItems[fl].classList.remove('show');
        }
        if (inputValue === '') {
            focusListItems[fl].classList.remove('show');
        }
    }
}

// highlight that filter choice list
var itemsToInput = document.querySelectorAll('.contains-focus-list ul li'),
    inputValue = document.querySelector('.filter-input');
        for (var ii = 0; ii < itemsToInput.length; ii++) {
            itemsToInput[ii].addEventListener('click', function(){
                inputValue.value = this.textContent;

                document.querySelectorAll('.contains-focus-list ul li').forEach(function (el) {
                    el.classList.remove('selected');
                })
                this.classList.add('selected');
            });
        }

//capture filter list selection, adds value to query build line
var filterFocusItems = document.querySelectorAll('.contains-focus-list ul li');
for (var fi = 0; fi < filterFocusItems.length; fi++) {
    filterFocusItems[fi].addEventListener('click', function (e) {
        var focusLiText = this;
        filterFour.innerHTML = '"<span class="text is-accent">' + focusLiText.textContent + '</span>"';
        applyQueryBtn.classList.remove('is-disabled');
        applyQueryBtn.classList.add('is-tertiary');
    });
}

// stops duplicate list entries
function singleLists(listType, listClass) {
    var assetListAvail = document.querySelectorAll('.' + listClass);
    for (listAvail = 0; listAvail < assetListAvail.length; listAvail++) {
        assetListAvail[listAvail].remove();
    }
    buildList(listType, listClass);
}

// function to dictate operator next steps panel
function operatorListItems(operatorListItem) {
    var operatorItem = document.querySelectorAll('.' + operatorListItem + ' li');
    for (var oItem = 0; oItem < operatorItem.length; oItem++) {
        operatorItem[oItem].addEventListener('click', function (e) {

            // get text value in operator list
            var dataOperatorTag = this;
            filterTwo.classList.add('is-white');
            filterThree.innerHTML = '.' + dataOperatorTag.textContent;
            filterFour.innerHTML = '" "';
            containsList.classList.add('show');
            addFilterBtn.classList.add('is-disabled');
            addFilterBtn.classList.remove('is-tertiary');
        });

    }
}

// build operator lists and add as functions
var vulnList = ['>=', '>', '<', '<=', '=', '!=', 'BETWEEN', 'IS NULL', 'IS NOT NULL'];
var sqlList = ['Insert', 'Remove', 'Delete', 'Update'];
var assetList = ['=', '!=', 'CONTAINS', 'STARTS WITH', 'ENDS WITH', 'LIKE', 'IS NULL', 'IS NOT NULL'];

function buildList(callList, elClassName) {
    var listUl = document.createElement('ul');
    listUl.className = elClassName;
    for (var cl = 0; cl < callList.length; cl++) {

        var listValues = callList[cl];
        var listLi = document.createElement('li');
        listLi.append(listValues);
        listUl.append(listLi);
    }
    var containParent = document.querySelector('.operators-list');
    containParent.append(listUl);
}

//bin the list on...
function removeAssetList() {
    var containParent = document.querySelector('.operators-list ul');
    containParent.remove();
}

// Save the choices - blue sky ;)
var journeyArray = [];

addFilterBtn.addEventListener('click', function (e) {
    cancelQuery.classList.remove('is-hidden')
    existDropdown.classList.add('is-hidden');
    filterActiveText.classList.remove('is-hidden');
    queryDropdown.classList.add('show');
    applyQueryBtn.classList.remove('is-hidden');
    this.classList.add('is-hidden');
    saveQuery.classList.add('is-hidden');
    createSection.classList.add('is-hidden');
    filterOne.textContent = 'New Filter';
    applyQueryBtn.classList.replace('is-tertiary', 'is-disabled');
    assetPanel.classList.add('is-hidden');
    suggestedPanel.classList.remove('is-hidden');
    containsList.classList.remove('show');
    operatorList.classList.remove('show');
    document.querySelectorAll('.data-row').forEach(function (el) {
        el.classList.remove('selected');
    });
    document.querySelectorAll('.query-builder-data').forEach(function (el) {
        el.classList.add('is-hidden');
    });
    document.querySelectorAll('.sidebar__link').forEach(function (el) {
        el.classList.remove('is-active');
    });
    document.querySelector('.category-filters').classList.remove('show');
    removeAssetList();
    
});

// build the query and apply it
function createQuery(appendClass, theQuery) {
    buildQuery = document.querySelector(appendClass);
    createSection = document.createElement('section');
    createSection.textContent = theQuery;
    createSection.classList.add('query-builder-data');
    createIcon = document.createElement('i');
    createIcon.classList.add('r7-icon', 'r7-icon-delete-x');
    createSection.appendChild(createIcon);
    buildQuery.appendChild(createSection);
}


applyQueryBtn.addEventListener('click', function (e) {
    var totalQuery = getQuery.textContent;
    createQuery('#build-list', totalQuery);
    filterOne.textContent = '';
    filterOne.classList.remove('is-accent');
    filterOne.classList.add('is-white');
    filterTwo.textContent = '';
    filterThree.textContent = '';
    filterFour.textContent = '';
    dataDisplay.classList.remove('is-hidden');
    cancelQuery.classList.add('is-hidden');
    saveQuery.classList.remove('is-hidden');
    queryDropdown.classList.remove('show')

    //trigger to acknowledge we have something saved
    pageBody.classList.add('query-saved');
    saveQuery.classList.replace('is-disabled', 'is-success');

    document.querySelectorAll('.query-builder-data').forEach(function (el) {
        el.classList.remove('is-hidden');
    })

    //add functionality to the delete button
    var queryDeleteBtn = document.querySelectorAll('.query-builder-data .r7-icon');
    for (var qdb = 0; qdb < queryDeleteBtn.length; qdb++) {
        queryDeleteBtn[qdb].addEventListener('click', function (e) {
            this.parentElement.remove();
        });
    }

    //reset the filter interface
    this.classList.add('is-hidden');
    addFilterBtn.classList.remove('is-hidden');
    addFilterBtn.classList.remove('is-disabled');
    addFilterBtn.classList.add('is-tertiary');

});

// SAVE FUNCTIONALITY
saveQuery.addEventListener('click', function () {
    updateInterface('saveQuery');
        var cancelQueryName = document.querySelector('.cancel-query-name'),
            saveQueryData = document.querySelector('.save-query-data'),
            saveQueryInput = document.querySelector('#saveQueryInput'),
            saveQueryAccess = document.querySelector('#saveQueryAccess');

            if(saveQueryInput.value === 'undefined'){
                saveQueryInput.value = '';
            }

            if(saveQueryAccess.value === 'undefined'){
                saveQueryAccess.value = '';
            }

            // general functionality for saving/editing/canceling/storing
            cancelQueryName.addEventListener('click', function(){
                updateInterface('cancelQuery');
            });

            radInputs = document.querySelectorAll('.input-group input');
                // we need to set something as it shows as default:private
                var setItemVar = '';
                    if(setItemVar == ''){
                        localStorage.setItem('storedChecked', 'Private');
                        setItemVar = 'Private'
                    }

                console.log('Defaulted: '+setItemVar);

                for(var r = 0; r < radInputs.length; r++){
                    radInputs[r].addEventListener('click', function(){
                        setItemVar = this.value;
                    });
                }

            saveQueryData.addEventListener('click', function(){
                localStorage.setItem('storedQueryName', saveQueryInput.value);
                localStorage.setItem('storedQueryAccess', saveQueryAccess.value); 
                localStorage.setItem('storedChecked', setItemVar);
                updateInterface('savedQuery');
 
                var editQueryAccess = document.querySelector('.edit-query');
                    editQueryAccess.addEventListener('click', function(){
                        updateInterface('editQuery');

                        radInputs = document.querySelectorAll('.input-group input');  

                            // no check needed it's whatever is in the storage
                            var setItemVar = localStorage.storedChecked;

                            console.log('You are editing: '+setItemVar);

                                for(var r = 0; r < radInputs.length; r++){
                                    radInputs[r].addEventListener('click', function(){
                                        setItemVar = this.value;
                                    });
                                }

                        var saveTheEdit = document.querySelector('.edit-query-data'),
                            cancelTheEdit = document.querySelector('.cancel-edit-query-name');

                            saveTheEdit.addEventListener('click', function(){
                                var saveQueryInput = document.querySelector('#saveQueryInput'),
                                    saveQueryAccess = document.querySelector('#saveQueryAccess');
                    
                                    localStorage.setItem('storedQueryName', saveQueryInput.value);
                                    localStorage.setItem('storedQueryAccess', saveQueryAccess.value); 
                                    localStorage.setItem('storedChecked', setItemVar);  
                                    updateInterface('savedQuery');
                            });

                            cancelTheEdit.addEventListener('click', function(){
                                //updateInterface('cancelQuery');
                                console.log('clicked cancel')
                            });

                    });

            });
});

//generate save interface
function updateInterface(type){
    var uiContainer = document.querySelector('.explore-base')
    if(type == 'saveQuery'){
      
    var queryPlaceholder = 'Save Query';

        var saveUI = `
            <section class="save-options text is-white">
                <input id="saveQueryInput" type="text" value="" placeholder="${queryPlaceholder}">
                <div class="option-control">
                    <div class="label">Visibility</div>
                    <div class="input-group">
                        <input value="Private" type="radio" name="vis" checked="checked"> <label for="">Private</label> <input value="Public" type="radio" name="vis"> <label for="">Public</label>
                    </div>
                </div>
                <div class="option-control">
                    <div class="label">Give Access to</div>
                    <label class="r7-label">
                        <span class="r7-description"></span>
                        <input id="saveQueryAccess" class="r7-input" value="" type="text" placeholder="">
                    </label>
                </div>
                <div class="btn-separate">
                    <button class="btn is-success save-query-data">Save</button>
                    <button class="btn is-white is-ghost cancel-query-name">Cancel</button>
                </div>
            </section>
        `
        ;

    } else if(type == 'savedQuery'){
        var saveUI = `
            <section class="save-options text is-white">
                <h2>${localStorage.storedQueryName} <i class="r7-icon r7-icon-edit-pencil edit-query"></i></h2>
                <div class="saved-small-text">
                    OWNED BY ME | ${localStorage.storedChecked === 'Private' ? `Private | SHARED WITH (<span title="${localStorage.storedQueryAccess}" class="text is-accent">1</span> USER)` : `Public`} | <span class="text is-accent">VERSION HISTORY</span>
                </div>
            </section>
        `
        ;

    } else if(type == 'editQuery'){
        saveUI = `
            <section class="save-options text is-white">
                <input id="saveQueryInput" type="text" value="${localStorage.storedQueryName}" placeholder="${queryPlaceholder}">
                <div class="option-control">
                    <div class="label">Visibility</div>
                    <div class="input-group">
                        ${localStorage.storedChecked === 'Private' ? `<input value="Private" type="radio" name="vis" checked="checked"> <label for="">Private</label> <input value="Public" type="radio" name="vis"> <label for="">Public</label>` : 
                        `<input value="Private" type="radio" name="vis"> <label for="">Private</label> <input value="Public" type="radio" name="vis" checked="checked"> <label for="">Public</label>`}
                    </div>
                </div>
                <div class="option-control">
                    <div class="label">Give Access to</div>
                    <label class="r7-label">
                        <span class="r7-description"></span>
                        <input id="saveQueryAccess" class="r7-input" value="${localStorage.storedQueryAccess}" type="text" placeholder="">
                    </label>
                </div>
                <div class="btn-separate">
                    <button class="btn is-success edit-query-data">Update</button>
                    <button class="btn is-white is-ghost cancel-edit-query-name">Cancel</button>
                </div>
            </section>
        `
        ;
    } else if(type == 'cancelQuery'){
    saveUI = `
        <h2>Create Query</h2>
    `
    ;
}
    uiContainer.innerHTML = saveUI;
}

// deactivates the save button until the fourth filter has content
function checkSave() {
    if (pageBody.classList.contains('query-saved') && filterFour.textContent === '') {
        saveQuery.classList.replace('is-success', 'is-disabled');
    }
}

clickableNav = document.querySelectorAll('.sidebar__subnav li')
    for(i = 0; i < clickableNav.length; i++){
        clickableNav[i].parentElement.parentElement.classList.add('hasUL');

        if( clickableNav[i].parentElement.parentElement.classList.contains('hasUL')){
            //catches the 7 that ARE available.
        }
        
    }
    